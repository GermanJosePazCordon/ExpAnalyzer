/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,15],$V2=[1,32],$V3=[1,17],$V4=[1,18],$V5=[1,19],$V6=[1,20],$V7=[1,21],$V8=[1,23],$V9=[1,24],$Va=[1,30],$Vb=[1,31],$Vc=[1,33],$Vd=[1,34],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,25],$Vj=[1,26],$Vk=[1,27],$Vl=[1,28],$Vm=[1,29],$Vn=[2,5,17,18,23,25,27,29,33,35,36,37,40,41,45,58,59,60,61,62,63,64,65,66,67,68,69],$Vo=[38,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57],$Vp=[2,64],$Vq=[1,43],$Vr=[1,50],$Vs=[1,51],$Vt=[1,52],$Vu=[1,53],$Vv=[1,54],$Vw=[1,55],$Vx=[1,56],$Vy=[1,57],$Vz=[1,58],$VA=[1,59],$VB=[1,60],$VC=[1,61],$VD=[1,62],$VE=[1,63],$VF=[20,23],$VG=[1,67],$VH=[20,21,34,38,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57],$VI=[2,65],$VJ=[2,66],$VK=[20,21,34,56,57],$VL=[1,99],$VM=[1,100],$VN=[20,21,34,44,45,50,51,52,53,54,55,56,57],$VO=[20,21,34,38,39,44,45,46,47,48,50,51,52,53,54,55,56,57],$VP=[20,21,34,50,51,52,53,54,55,56,57],$VQ=[18,23,45,58,59,60,61,62,63,64],$VR=[1,124],$VS=[1,123],$VT=[27,33,35];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DEFPRINT":7,"DECLARARVARIABLE":8,"ASIGNARVARIABLE":9,"SENTENCIAIF":10,"SENTENCIASWITCH":11,"INSTRUCCIONBREAK":12,"SENTENCIAWHILE":13,"INCREMENTO":14,"SENTENCIADOWHILE":15,"SENTENCIAFOR":16,"RIMPRIMIR":17,"PARIZQ":18,"EXPRESION":19,"PARDER":20,"PTCOMA":21,"TIPO":22,"IDENTIFICADOR":23,"IGUAL":24,"RIF":25,"LLAIZQ":26,"LLADER":27,"RELSE":28,"SWITCH":29,"CASELIST":30,"DEFAULTLIST":31,"LISTACASE":32,"CASE":33,"DBPUNTO":34,"DEFAULT":35,"BREAK":36,"WHILE":37,"INCREMENTAR":38,"DECREMENTAR":39,"DO":40,"FOR":41,"DECLARAFOR":42,"ACTUALIZACION":43,"MAS":44,"MENOS":45,"DIVISION":46,"MULTIPLICACION":47,"MODULO":48,"POTENCIA":49,"IGUALACION":50,"DIFERENCIACION":51,"MENORQUE":52,"MENORIGUAL":53,"MAYORQUE":54,"MAYORIGUAL":55,"OR":56,"AND":57,"NOT":58,"ENTERO":59,"DECIMAL":60,"CARACTER":61,"TRUE":62,"FALSE":63,"CADENA":64,"INT":65,"DOUBLE":66,"BOOLEAN":67,"CHAR":68,"STRING":69,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"RIMPRIMIR",18:"PARIZQ",20:"PARDER",21:"PTCOMA",23:"IDENTIFICADOR",24:"IGUAL",25:"RIF",26:"LLAIZQ",27:"LLADER",28:"RELSE",29:"SWITCH",33:"CASE",34:"DBPUNTO",35:"DEFAULT",36:"BREAK",37:"WHILE",38:"INCREMENTAR",39:"DECREMENTAR",40:"DO",41:"FOR",44:"MAS",45:"MENOS",46:"DIVISION",47:"MULTIPLICACION",48:"MODULO",49:"POTENCIA",50:"IGUALACION",51:"DIFERENCIACION",52:"MENORQUE",53:"MENORIGUAL",54:"MAYORQUE",55:"MAYORIGUAL",56:"OR",57:"AND",58:"NOT",59:"ENTERO",60:"DECIMAL",61:"CARACTER",62:"TRUE",63:"FALSE",64:"CADENA",65:"INT",66:"DOUBLE",67:"BOOLEAN",68:"CHAR",69:"STRING"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[8,3],[8,5],[9,4],[10,7],[10,11],[10,9],[11,8],[11,7],[11,7],[30,2],[30,1],[32,4],[31,3],[12,2],[13,7],[14,3],[14,3],[15,9],[16,10],[42,1],[42,1],[43,2],[43,2],[43,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,3],[19,4],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,2],[19,2],[22,1],[22,1],[22,1],[22,1],[22,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 25:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 26:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 28: case 35: case 36:
 this.$ = $$[$0]; 
break;
case 14:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 15:
 this.$ = new Imprimir.default($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 16:
 this.$ = new Declaracion.default(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], null); 
break;
case 17:
 this.$ = new Declaracion.default(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 18:
 this.$ = new Asignacion.default(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], $$[$0-1]); 
break;
case 19:
 this.$ = new If.default(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1], "IF"); 
break;
case 20:
 this.$ = new IfElse.default(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-8], $$[$0-5], $$[$0-1], "IFELSE"); 
break;
case 21:
 this.$ = new ElseIF.default(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0-3], $$[$0], "ELSEIF"); 
break;
case 22:
 this.$ = new Switch.default(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-2], $$[$0-1]); 
break;
case 23:
 this.$ = new Switch.default(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1], null); 
break;
case 24:
 this.$ = new Switch.default(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], null, $$[$0-1]); 
break;
case 27:
 this.$ = new Case.default(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0]); 
break;
case 29:
 this.$ = new Break.default(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]); 
break;
case 30:
 this.$ = new While.default(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1]); 
break;
case 31:
 this.$ = new MasMas.default(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2]); 
break;
case 32:
 this.$ = new MenosMenos.default(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2]); 
break;
case 33:
 this.$ = new DoWhile.default(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0-2]); 
break;
case 34:
 this.$ = new For.default(_$[$0-9].first_line, _$[$0-9].first_column, $$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 37:
 this.$ = new Incremento.default(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]); 
break;
case 38:
 this.$ = new Decremento.default(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], Aritmetica.OperadorAritmetico.MENOS); 
break;
case 39:
 this.$ = new Asignacion.default(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 40:
 this.$ = new Aritmetica.default( Aritmetica.OperadorAritmetico.SUMA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 41:
 this.$ = new Aritmetica.default( Aritmetica.OperadorAritmetico.RESTA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 42:
 this.$ = new Aritmetica.default( Aritmetica.OperadorAritmetico.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 43:
 this.$ = new Aritmetica.default( Aritmetica.OperadorAritmetico.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 44:
 this.$ = new Aritmetica.default( Aritmetica.OperadorAritmetico.MODULO, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 45:
 this.$ = new Aritmetica.default( Aritmetica.OperadorAritmetico.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 46:
 this.$ = new Aritmetica.default( Aritmetica.OperadorAritmetico.MENOSUNARIO, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0], null); 
break;
case 47:
 this.$ = new Relacional.default( Relacional.OperadorRelacional.IGUALACION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 48:
 this.$ = new Relacional.default( Relacional.OperadorRelacional.DIFERENCIACION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 49:
 this.$ = new Relacional.default( Relacional.OperadorRelacional.MENORQUE, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 50:
 this.$ = new Relacional.default( Relacional.OperadorRelacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 51:
 this.$ = new Relacional.default( Relacional.OperadorRelacional.MAYORQUE, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 52:
 this.$ = new Relacional.default( Relacional.OperadorRelacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 53:
 this.$ = new Logica.default( Logica.OperadorLogico.OR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 54:
 this.$ = new Logica.default( Logica.OperadorLogico.AND, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 55:
 this.$ = new Logica.default( Logica.OperadorLogico.NOT, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0], null); 
break;
case 56:
 this.$ = $$[$0-1]; 
break;
case 57:
 this.$ = new Castear.default(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0]); 
break;
case 58:
 this.$ = new Primitiva.default( new Tipo.default(Tipo.tipos.ENTERO),$$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 59:
 this.$ = new Primitiva.default( new Tipo.default(Tipo.tipos.DECIMAL),$$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 60:
 this.$ = new Primitiva.default( new Tipo.default(Tipo.tipos.CARACTER),$$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 61: case 62:
 this.$ = new Primitiva.default( new Tipo.default(Tipo.tipos.BOOLEAN),$$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 63:
 this.$ = new Primitiva.default( new Tipo.default(Tipo.tipos.CADENA),$$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 64:
 this.$ = new Variable.default(_$[$0].first_line, _$[$0].first_column, $$[$0]); 
break;
case 65:
 this.$ = new MasMas.default(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]); 
break;
case 66:
 this.$ = new MenosMenos.default(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]); 
break;
case 67:
 this.$ = Tipo.tipos.ENTERO; 
break;
case 68:
 this.$ = Tipo.tipos.DECIMAL; 
break;
case 69:
 this.$ = Tipo.tipos.BOOLEAN; 
break;
case 70:
 this.$ = Tipo.tipos.CARACTER; 
break;
case 71:
 this.$ = Tipo.tipos.CADENA; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:$V2,19:22,22:16,23:$V3,25:$V4,29:$V5,36:$V6,37:$V7,40:$V8,41:$V9,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm},{1:[3]},{2:$V0,5:[1,39],6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:$V2,19:22,22:16,23:$V3,25:$V4,29:$V5,36:$V6,37:$V7,40:$V8,41:$V9,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm},o($Vn,[2,3]),o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,6]),o($Vn,[2,7]),o($Vn,[2,8]),o($Vn,[2,9]),o($Vn,[2,10]),o($Vn,[2,11]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),{18:[1,41]},{23:[1,42]},o($Vo,$Vp,{24:$Vq}),{18:[1,44]},{18:[1,45]},{21:[1,46]},{18:[1,47]},{38:[1,48],39:[1,49],44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE},{26:[1,64]},{18:[1,65]},o($VF,[2,67]),o($VF,[2,68]),o($VF,[2,69]),o($VF,[2,70]),o($VF,[2,71]),{18:$V2,19:66,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{18:$V2,19:68,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{18:$V2,19:69,22:70,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm},o($VH,[2,58]),o($VH,[2,59]),o($VH,[2,60]),o($VH,[2,61]),o($VH,[2,62]),o($VH,[2,63]),{1:[2,1]},o($Vn,[2,2]),{18:$V2,19:71,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{21:[1,72],24:[1,73]},{18:$V2,19:74,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{18:$V2,19:75,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{18:$V2,19:76,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},o($Vn,[2,29]),{18:$V2,19:77,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},o($Vo,$VI,{21:[1,78]}),o($Vo,$VJ,{21:[1,79]}),{18:$V2,19:80,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{18:$V2,19:81,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{18:$V2,19:82,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{18:$V2,19:83,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{18:$V2,19:84,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{18:$V2,19:85,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{18:$V2,19:86,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{18:$V2,19:87,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{18:$V2,19:88,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{18:$V2,19:89,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{18:$V2,19:90,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{18:$V2,19:91,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{18:$V2,19:92,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{18:$V2,19:93,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{2:$V0,4:94,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:$V2,19:22,22:16,23:$V3,25:$V4,29:$V5,36:$V6,37:$V7,40:$V8,41:$V9,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm},{8:96,9:97,22:16,23:[1,98],42:95,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm},o($VH,[2,46]),o($VH,$Vp),o($VK,[2,55],{38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC}),{20:[1,101],38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE},{20:[1,102]},{20:[1,103],38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE},o($Vn,[2,16]),{18:$V2,19:104,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{21:[1,105],38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE},{20:[1,106],38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE},{20:[1,107],38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE},{20:[1,108],38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE},o($Vn,[2,31]),o($Vn,[2,32]),o($VN,[2,40],{38:$VL,39:$VM,46:$Vt,47:$Vu,48:$Vv,49:$Vw}),o($VN,[2,41],{38:$VL,39:$VM,46:$Vt,47:$Vu,48:$Vv,49:$Vw}),o($VO,[2,42],{49:$Vw}),o($VO,[2,43],{49:$Vw}),o($VO,[2,44],{49:$Vw}),o($VH,[2,45]),o($VP,[2,47],{38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw}),o($VP,[2,48],{38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw}),o($VP,[2,49],{38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw}),o($VP,[2,50],{38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw}),o($VP,[2,51],{38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw}),o($VP,[2,52],{38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw}),o([20,21,34,56],[2,53],{38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,57:$VE}),o($VK,[2,54],{38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC}),{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:$V2,19:22,22:16,23:$V3,25:$V4,27:[1,109],29:$V5,36:$V6,37:$V7,40:$V8,41:$V9,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm},{18:$V2,19:110,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},o($VQ,[2,35]),o($VQ,[2,36]),{24:$Vq},o($VH,$VI),o($VH,$VJ),o($VH,[2,56]),{18:$V2,19:111,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{21:[1,112]},{21:[1,113],38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE},o($Vn,[2,18]),{26:[1,114]},{26:[1,115]},{26:[1,116]},{37:[1,117]},{21:[1,118],38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE},o($VH,[2,57]),o($Vn,[2,15]),o($Vn,[2,17]),{2:$V0,4:119,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:$V2,19:22,22:16,23:$V3,25:$V4,29:$V5,36:$V6,37:$V7,40:$V8,41:$V9,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm},{30:120,31:121,32:122,33:$VR,35:$VS},{2:$V0,4:125,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:$V2,19:22,22:16,23:$V3,25:$V4,29:$V5,36:$V6,37:$V7,40:$V8,41:$V9,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm},{18:[1,126]},{23:[1,128],43:127},{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:$V2,19:22,22:16,23:$V3,25:$V4,27:[1,129],29:$V5,36:$V6,37:$V7,40:$V8,41:$V9,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm},{27:[1,131],31:130,32:132,33:$VR,35:$VS},{27:[1,133]},o($VT,[2,26]),{34:[1,134]},{18:$V2,19:135,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:$V2,19:22,22:16,23:$V3,25:$V4,27:[1,136],29:$V5,36:$V6,37:$V7,40:$V8,41:$V9,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm},{18:$V2,19:137,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{20:[1,138]},{24:[1,141],38:[1,139],39:[1,140]},o($Vn,[2,19],{28:[1,142]}),{27:[1,143]},o($Vn,[2,23]),o($VT,[2,25]),o($Vn,[2,24]),{2:$V0,4:144,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:$V2,19:22,22:16,23:$V3,25:$V4,29:$V5,36:$V6,37:$V7,40:$V8,41:$V9,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm},{34:[1,145],38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE},o($Vn,[2,30]),{20:[1,146],38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE},{26:[1,147]},{20:[2,37]},{20:[2,38]},{18:$V2,19:148,23:$VG,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh},{10:150,25:$V4,26:[1,149]},o($Vn,[2,22]),{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:$V2,19:22,22:16,23:$V3,25:$V4,27:[2,28],29:$V5,36:$V6,37:$V7,40:$V8,41:$V9,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm},{2:$V0,4:151,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:$V2,19:22,22:16,23:$V3,25:$V4,29:$V5,36:$V6,37:$V7,40:$V8,41:$V9,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm},{21:[1,152]},{2:$V0,4:153,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:$V2,19:22,22:16,23:$V3,25:$V4,29:$V5,36:$V6,37:$V7,40:$V8,41:$V9,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm},{20:[2,39],38:$VL,39:$VM,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE},{2:$V0,4:154,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:$V2,19:22,22:16,23:$V3,25:$V4,29:$V5,36:$V6,37:$V7,40:$V8,41:$V9,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm},o($Vn,[2,21]),o($VT,[2,27],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,22:16,19:22,6:40,2:$V0,17:$V1,18:$V2,23:$V3,25:$V4,29:$V5,36:$V6,37:$V7,40:$V8,41:$V9,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm}),o($Vn,[2,33]),{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:$V2,19:22,22:16,23:$V3,25:$V4,27:[1,155],29:$V5,36:$V6,37:$V7,40:$V8,41:$V9,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm},{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,18:$V2,19:22,22:16,23:$V3,25:$V4,27:[1,156],29:$V5,36:$V6,37:$V7,40:$V8,41:$V9,45:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,68:$Vl,69:$Vm},o($Vn,[2,34]),o($Vn,[2,20])],
defaultActions: {39:[2,1],139:[2,37],140:[2,38]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const Excepcion = require('./exception/Exception');
    const Tipo = require('./tablaSimbolos/Tipo');
    const Arbol = require('./tablaSimbolos/Arbol');
    const Primitiva = require('./expression/Primitiva');
    const Imprimir = require('./instrucciones/Imprimir');
    const Aritmetica = require('./expression/Aritmetica');
    const Relacional = require('./expression/Relacional');
    const Logica = require('./expression/Logica');
    const Declaracion = require('./instrucciones/Declaracion');
    const Asignacion = require('./instrucciones/Asignacion');
    const Castear = require('./instrucciones/Casteo');
    const Variable = require('./expression/Variable');
    const If = require('./instrucciones/IF');
    const IfElse = require('./instrucciones/IFElse');
    const ElseIF = require('./instrucciones/ElseIF');
    const Switch = require('./instrucciones/Switch');
    const Case = require('./expression/Case');
    const Break = require('./instrucciones/Break');
    const Incremento = require('./instrucciones/Incremento');
    const Decremento = require('./instrucciones/Decremento');
    const MasMas = require('./expression/MasMas');
    const MenosMenos = require('./expression/MenosMenos');
    const While = require('./instrucciones/While');
    const DoWhile = require('./instrucciones/DoWhile');
    const For = require('./instrucciones/For');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:// se ignoran espacios en blanco
break;
case 3:// comentario simple l√≠nea
break;
case 4:// comentario multiple l√≠neas
break;
case 5:return 17;
break;
case 6:return 65;
break;
case 7:return 66;
break;
case 8:return 67;
break;
case 9:return 68;
break;
case 10:return 69;
break;
case 11:return 62;
break;
case 12:return 63;
break;
case 13:return 25;
break;
case 14:return 28;
break;
case 15:return 29;
break;
case 16:return 33;
break;
case 17:return 36;
break;
case 18:return 35;
break;
case 19:return 37;
break;
case 20:return 40;
break;
case 21:return 41;
break;
case 22:return 21;
break;
case 23:return 34;
break;
case 24:return 18;
break;
case 25:return 20;
break;
case 26:return 38;
break;
case 27:return 39;
break;
case 28:return 44;
break;
case 29:return 45;
break;
case 30:return 46;
break;
case 31:return 47;
break;
case 32:return 48;
break;
case 33:return 49;
break;
case 34:return 50;
break;
case 35:return 51;
break;
case 36:return 53;
break;
case 37:return 55;
break;
case 38:return 58;
break;
case 39:return 57;
break;
case 40:return 56;
break;
case 41:return 54;
break;
case 42:return 52;
break;
case 43:return "IGUAL";
break;
case 44:return 26;
break;
case 45:return 27;
break;
case 46: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 	return 64; 
break;
case 47: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 	return 61; 
break;
case 48:return 60;
break;
case 49:return 59;
break;
case 50:return 23;
break;
case 51:return 5;
break;
case 52: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:print\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:;)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:"[^\"]*")/i,/^(?:'[^\"]')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}